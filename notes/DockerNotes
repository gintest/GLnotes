Docker Notes:
——————>
Commands:

The docker exec command runs a new command in a running container.
docker exec -ti my_container "echo a && echo b" 
docker exec -ti my_container "bash" 

Docker service create —replicas 2 —network overlay network here imagenamehere commandhere
Docker network connect networkname containerid
Docker network disconnect 
Docker network create -d bridge/overlay/ nameofnetworkhere
Docker network/image/container/..etc inspect namehere
Docker run -it imagehere (runs container in interactive (-i))

——————————>
Vigrant for virtual machines deployment automation.

Docker images
Docker image ls 
Docker ps -a
Docker build -t tag name -f filename here . 
Docker container run --name namehere -itd containername (-d for deattached mode will run in background)
Docker inspect 
Docker network create
Docker network delete
Docker run 

Docker swarm init —advertise-addr addresser
Docker service create —name namehere —replicas 2 nameofimagehere

Docker service rm 
Docker service ls
Docker service ps servicename 
Docker node ls
Docker node rm nodenamehere
docker swarm join-token manager to list token to add manager
docker swarm join-token worker to list token to add worker

———————————>
Services are used in docker for scaling applications purposes, Services do work in Docker swarm env.
Each service can find itself if on same network created by docker, which is part of service discovery.
New networks can be created and managed by docker network command.
If in swarm there are total of 5 systems out of which on two the application is running on port 80, when accessed from outside the swarm it shows the application running anyway despite the fact that application is running only on two systems out of 5 because of load balancing implemented by default in docker swarm.

—————————>
Docker has bridge network be default enabled in docker networking, it is called as NAT in case of windows.
Second is overlay networking, in this, you can map multiple containers under one single network, they are reachable to each other via overlay network.
if one wants to use his containers as live machines on existing VLANS then MACVLAN is the choice, this gives every container its own MAC and IP address on existing VLAN thus they act as live machines, promiscious mode is pre requesite.

------------>
EXAMPLE OF DOCKER FILE
# Use the official image as a parent image.
FROM node:current-slim
# Set the working directory.
WORKDIR /usr/src/app
# Copy the file from your host to your current location.
COPY package.json .
# Run the command inside your image filesystem.
RUN npm install
# Add metadata to the image to describe which port the container is listening on at runtime.
EXPOSE 8080
# Run the specified command within the container.
CMD [ "npm", "start" ]
# Copy the rest of your app's source code from your host to your image filesystem.
COPY . .


---------------------->
STEPS to build docker image and run it :- 
git clone https://github.com/dockersamples/node-bulletin-board
cd node-bulletin-board/bulletin-board-app

docker build --tag bulletinboard:1.0 .

docker run --publish 8000:8080 --detach --name bb bulletinboard:1.0
--publish asks Docker to forward traffic incoming on the host’s port 8000 to the container’s port 8080
container is started with name 'bb'

docker rm --force bb (to deleted container)
docker stop bb (to stop container)


docker ps -a listing process
docker exec -it containeridhere "command tobe exec here in container"

docker container run --name test -it imagenamehere to run separate container from existing image on system, --rm will enable docker to delete container once it is stopped, --hostname to specify hostname for the machine, --dns for dns, --mac-address, --add-host to add entry in hosts in docker container

docker inspect to inspect container and network, -f to select certain field from json format to be printed in terminal

docker start containeridhere to start container, docker stop to stop container, docker restart
docker history to know history for docker image
docker rm to delete docker image/container

docker run --restart=on-failure:10 redis will restart container on failure, docker run --restart=always redis will restart always

we can specify costum n/w setting for containers via docker run command, following are the switches to be used :- 

--dns=[]           : Set custom dns servers for the container
--network="bridge" : Connect a container to a network
                      'bridge': create a network stack on the default Docker bridge
                      'none': no networking
                      'container:<name|id>': reuse another container's network stack
                      'host': use the Docker host network stack
                      '<network-name>|<network-id>': connect to a user-defined network
--network-alias=[] : Add network-scoped alias for the container
--add-host=""      : Add a line to /etc/hosts (host:IP)
--mac-address=""   : Sets the container's Ethernet device's MAC address
--ip=""            : Sets the container's Ethernet device's IPv4 address
--ip6=""           : Sets the container's Ethernet device's IPv6 address
--link-local-ip=[] : Sets one or more container's Ethernet device's link local IPv4/IPv6 

costum IPs can only be given on user created networks.


we can reserve memory and cpu to be used in docker run:- 

-m, --memory=""	Memory limit (format: <number>[<unit>]). Number is a positive integer. Unit can be one of b, k, m, or g. Minimum is 4M.
--memory-swap=""	Total memory limit (memory + swap, format: <number>[<unit>]). Number is a positive integer. Unit can be one of b, k, m, or g.
--memory-reservation=""	Memory soft limit (format: <number>[<unit>]). Number is a positive integer. Unit can be one of b, k, m, or g.
--kernel-memory=""	Kernel memory limit (format: <number>[<unit>]). Number is a positive integer. Unit can be one of b, k, m, or g. Minimum is 4M.
-c, --cpu-shares=0	CPU shares (relative weight)
--cpus=0.000	Number of CPUs. Number is a fractional number. 0.000 means no limit.

env variable in container can be set through -e in docker run

we can do health check for container by following switches
--health-cmd            Command to run to check health
  --health-interval       Time between running the check
  --health-retries        Consecutive failures needed to report unhealthy
  --health-timeout        Maximum time to allow one check to run
  --health-start-period   Start period for the container to initialize before starting health-retries countdown
  --no-healthcheck        Disable any container-specified HEALTHCHECK
  
the value for the same after container is running can be checked by docker inspect command and specifying field in -f 

docker run -d --tmpfs /run:rw,noexec,nosuid,size=65536k my_image for mount options in container
--user=[ user | user:group | uid | uid:gid | user:gid | uid:group ] in docker run to create specific user/groups in container
-w="", --workdir="": Working directory inside the container


we can access file outside of docker by docker volume.
docker run -v volumename:/tobe mapped inside container

building a image in docker and costum naming it :- 
docker build -t myimage:latest -<<EOF
FROM busybox
RUN echo "hello world"
EOF

docker commit command to create docker image out of container

docker cp filenamehere containername:pathtocopyfileto , this enable to copy files from localsytem to container

docker diff checks the file changes on container

docker stats for displaying stats 

Mapping docker volume hello to world dirtectory inside container
docker run -d -v hello:/world busybox ls /world


docker secret to create enrypted form of secrets for docker to use

docker service is basically deployment of container in slave nodes in swarm

Example of dockerfile----->
FROM  busybox
RUN  mkdir test
TOUCH test.yaml
COPY  test.yaml test/

